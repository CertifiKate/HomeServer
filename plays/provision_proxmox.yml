---
# PVE Requirements:
# - SSH access to proxmox node as ansible_user with password-less sudo perms
# - SSH access to proxmox node to use as jump host to LXC containers (recommended with no permissions to other commands) (TODO: Automate)
# - Download template on host(s). (TODO: Automate)

- name: Setup Proxmox Servers
  hosts: proxmox_servers
  gather_facts: true
  become: true
  tasks:
  - name:
    block:
    # Note: Changes to networking after cts have been setup will require the CTs to be rebooted
    - name: Setup proxmox networking
      copy:
        dest: /etc/network/interfaces
        content: |
          auto lo
          iface lo inet loopback

          auto {{ ethernet_interface }}
          iface {{ ethernet_interface }} inet manual

          auto vmbr0
          iface vmbr0 inet static
            address {{ ansible_host }}/24
            gateway {{ gateway }}
            bridge-ports {{ ethernet_interface }}
            bridge-stp off
            bridge-fd 0

          auto vmbr1
          iface vmbr1 inet static
            address  10.0.0.1/24
            bridge-ports none
            bridge-stp off 
            bridge-fd 0

            # NAT our internal ct network
            post-up   echo 1 > /proc/sys/net/ipv4/ip_forward
            post-up   iptables -t nat -A POSTROUTING -s '10.0.0.0/24' -o vmbr0 -j MASQUERADE
            post-down iptables -t nat -D POSTROUTING -s '10.0.0.0/24' -o vmbr0 -j MASQUERADE 

            # Port forwards
            # 80 & 443 -> prox-01
            post-up   iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 80 -j DNAT --to {{ hostvars['prox-01'].ansible_host }}:80
            post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 80 -j DNAT --to {{ hostvars['prox-01'].ansible_host }}:80
            post-up   iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 443 -j DNAT --to {{ hostvars['prox-01'].ansible_host }}:443
            post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 443 -j DNAT --to {{ hostvars['prox-01'].ansible_host }}:443

            # 8096 -> media-01 (jellyfin)
            post-up   iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 8096 -j DNAT --to {{ hostvars['media-01'].ansible_host }}:8096
            post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 8096 -j DNAT --to {{ hostvars['media-01'].ansible_host }}:8096

            # 1883 -> home-01 (MQTT)
            post-up   iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 1883 -j DNAT --to {{ hostvars['home-01'].ansible_host }}:1883
            post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 1883 -j DNAT --to {{ hostvars['home-01'].ansible_host }}:1883

            # 51820 -> gate-01 (wireguard)
            post-up   iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 51820 -j DNAT --to {{ hostvars['gate-01'].ansible_host }}:51820
            post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 51820 -j DNAT --to {{ hostvars['gate-01'].ansible_host }}:51820
            post-up   iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 51821 -j DNAT --to {{ hostvars['gate-01'].ansible_host }}:51821
            post-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 51821 -j DNAT --to {{ hostvars['gate-01'].ansible_host }}:51821

          # Coder bridge
          auto vmbr101
          iface vmbr101 inet static
            address  10.0.101.1/24
            bridge-ports none
            bridge-stp off 
            bridge-fd 0
            post-up   echo 1 > /proc/sys/net/ipv4/ip_forward
            post-up   iptables -t nat -A POSTROUTING -s '10.0.101.0/24' -o vmbr0 -j MASQUERADE
            post-down iptables -t nat -D POSTROUTING -s '10.0.101.0/24' -o vmbr0 -j MASQUERADE
        

          # Connect second NIC to guest/IOT wifi (for Home Assistant)
          auto enp1s0
          iface enp1s0 inet manual

          auto vmbr2
          iface vmbr2 inet static
            address 192.168.200.2/24
            gateway 192.168.200.1
            bridge-ports enp1s0
            bridge-stp off
            bridge-fd 0

      register: proxmoxNetwork
    
    - block:
      - name: Reload networking
        command:
          cmd: ifreload -a

      - name: Wait for Proxmox to come back online
        wait_for:
          port: 22
          host: '{{ ansible_ssh_host }}'
          timeout: 30
      when: proxmoxNetwork.changed

  - name: Setup SSH jump box user
    block:
    - name: Create jump box user
      user:
        name: ssh_jump_host
        comment: Jump host user with no permissions except ssh tunneling
        shell: /bin/false

    - name: Add SSH Key
      authorized_key:
        user: ssh_jump_host
        key: "{{ pve_ansible_pubkey }}"
        state: present

    - name: Secure SSH server side
      copy:
        dest: /etc/ssh/sshd_config.d/jump_user.conf
        content: |
          Match User ssh_jump_host
            PermitTTY no
            X11Forwarding no
            PermitTunnel no
            GatewayPorts no
            ForceCommand /usr/sbin/nologin

  - name: Setup apt cache
    block:
    - name: Install apt-cacher-ng
      apt:
        pkg: 
        - 'apt-cacher-ng'
        state: latest
        update_cache: yes

    - name: Start apt-cacher service
      service:
        name: apt-cacher-ng
        state: started
        enabled: yes

    - name: Pass through HTTPS repos
      lineinfile:
        path: /etc/apt-cacher-ng/acng.conf
        line: 'PassThroughPattern: ^(.*):443$'
      notify: restart-apt-cacher
  
  handlers:
    - name: Restart apt-cacher-ng service
      ansible.builtin.service:
        name: apt-cacher-ng
        state: restarted
      listen: restart-apt-cacher

- name: Provision Proxmox LXC Containers
  hosts: pve_lxd_containers
  connection: local
  gather_facts: false
  tasks:
  - name: 
    block:
    # - name: Get Template
    #   run_once: true
    #   connection: ssh
    #   delegate_to: '{{ node }}'
    #   command:
    #     cmd: 'pveam download local {{ ostemplate }}'

    - name: Create LXC
      include_role:
        name: create-proxmox-lxc

    - name: Start LXC
      community.general.proxmox:
        vmid: '{{ vmid }}'
        api_user: '{{ pve_api_user }}'
        api_password: '{{ pve_api_password }}'
        api_host: '{{ hostvars[node].ansible_host }}'
        state: started
      register: startLxcTask

    - name: Pause for 10s to let LXC start
      wait_for:
        host: '{{ ansible_host }}'
        port: 22
        timeout: 10
      when: startLxcTask.changed

    - name:
      import_role:
        name: init-host

- name: Setup Jellyfin hardware acceleration
  hosts: proxmox_servers
  become: true
  tasks:
    - name: Setup Jellyfin config
      ansible.builtin.blockinfile:
        path: "/etc/pve/lxc/{{ hostvars['media-01'].vmid }}.conf"
        block: |
          lxc.cgroup2.devices.allow: c 226:0 rwm
          lxc.cgroup2.devices.allow: c 226:128 rwm
          lxc.mount.entry: /dev/dri/card0 dev/dri/card0 none bind,optional,create=file
          lxc.mount.entry: /dev/dri/renderD128 dev/dri/renderD128 none bind,optional,create=file

    - name: Restart Jellyfin
      become: false
      delegate_to: local
      connection: local
      community.general.proxmox:
        vmid: "{{ hostvars['media-01'].vmid }}"
        api_user: "{{ hostvars['media-01'].pve_api_user }}"
        api_password: "{{ hostvars['media-01'].pve_api_password }}"
        api_host: "{{ hostvars['media-01'].ansible_host }}"
        state: restarted