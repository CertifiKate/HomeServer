---
# Sonarr
- name: Ensure Sonarr directory exists
  file:
    path: "{{ project_directory }}/sonarr/config"
    state: directory
  tags: sonarr

- name: Create Sonarr docker container
  include_role:
    name: generic-setup-docker-container
  vars:
    name: sonarr
    image: linuxserver/sonarr
    networks:
      - name: "media"
      - name: "torrent"
    state: started
    volumes:
      - "{{ project_directory }}/sonarr/config/:/config/"
      - "{{ media_directory }}:/data"
    ports:
      - "8989:8989"
    env:
      PUID: "{{ sonarr_container_uid }}"
      PGID: "{{ sonarr_container_gid }}"
      TZ: "{{ timezone }}"
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', '-s', 'http://localhost:8989' ]
      interval: 10s
      timeout: 10s
      retries: 5
  tags: sonarr

# Radarr
- name: Ensure Radarr directory exists
  file:
    path: "{{project_directory}}/radarr/config"
    state: directory
  tags: radarr

- name: Create Radarr docker container
  include_role:
    name: generic-setup-docker-container
  vars:
    name: radarr
    image: linuxserver/radarr
    networks:
      - name: "media"
      - name: "torrent"
    state: started
    volumes:
      - "{{ project_directory }}/radarr/config/:/config/"
      - "{{ media_directory }}:/data"
    ports:
      - "7878:7878"
    env:
      PUID: "{{ radarr_container_uid }}"
      PGID: "{{ radarr_container_gid }}"
      TZ: "{{ timezone }}"
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', '-s', 'http://localhost:7878' ]
      interval: 10s
      timeout: 10s
      retries: 5
  tags: radarr

# Jellyseer
- name: Install Jellyseer
  block:
  - name: Ensure Jellyseer directory exists
    file:
      path: "{{ project_directory }}/jellyseer/config"
      state: directory

  - name: Create Jellyseer docker container
    include_role:
      name: generic-setup-docker-container
    vars:
      name: jellyseer
      image: fallenbagel/jellyseerr:latest
      networks:
        - name: "media"
      state: started
      volumes:
        - "{{ project_directory }}/jellyseer/config/:/app/config/"
      ports:
        - "5055:5055"
      env:
        TZ: "{{ timezone }}"
  tags: jellyseer

# Prowlarr
- name: Ensure Prowlarr directory exists
  file:
    path: "{{ project_directory }}/prowlarr/config"
    state: directory
  tags: prowlarr

- name: Create Prowlarr docker container
  include_role:
    name: generic-setup-docker-container
  vars:
    name: prowlarr
    image: ghcr.io/linuxserver/prowlarr:develop
    networks:
      - name: "media"
    state: started
    volumes:
      - "{{ project_directory }}/prowlarr/config/:/config/"
    ports:
      - "9696:9696"
    env:
      PUID: "{{ prowlarr_container_uid }}"
      PGID: "{{ prowlarr_container_gid }}"
      TZ: "{{ timezone }}"
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', '-s', 'http://localhost:9696' ]
      interval: 10s
      timeout: 10s
      retries: 5
  tags: prowlarr