- name: Run initial nix configuration from bare install - no python
  block:
  - name: Check if we can connect
    ping:
    vars:
      ansible_python_interpreter: "/run/current-system/sw/bin/python3"
    register: sshReachable
    ignore_errors: true
    ignore_unreachable: true

  - name: Determine if Python installed
    raw: python -V
    register: pythonInstalled
    failed_when: false
    ignore_errors: true
    changed_when: false
    when: sshReachable.failed is false
    #  or sshReachable.unreachable is defined and sshReachable.unreachable

  - set_fact:
      needsPython: "{{ sshReachable.failed }}"
    # or sshReachable.unreachable or pythonInstalled.rc not in [0] }}"

  - name: Setup basic Nix config without python
    delegate_to: "{{ node }}"
    become: true
    when: needsPython
    block:

    - name: Copy Nix config to node
      template:
        src: "{{ nix_shared_config_dir }}"
        dest: "/tmp/{{ vmid }}-configuration.nix"
      register: nixConfigChanged
      vars: 
        skipServiceInit: true

    - name: Push config to Nix
      command:
        cmd: "pct push {{ vmid }} /tmp/{{ vmid }}-configuration.nix /etc/nixos/configuration.nix"

    - name: Update nix-channel
      shell:
        cmd: pct enter {{ vmid  }}
        stdin:
          source /etc/set-environment;
          nix-channel --update;
          exit;

    - name: Restart Nix container
      delegate_to: localhost
      become: false
      community.general.proxmox:
        vmid: "{{ vmid }}"
        api_user: '{{ vault_pve_api_user }}'
        api_password: '{{ vault_pve_api_password }}'
        api_host: '{{ hostvars[node].ansible_host }}'
        state: restarted
                  
    - name: Wait for Nix to come back up
      pause:
        seconds: 15

    - name: Rebuild Nix
      shell:
        cmd: pct enter {{ vmid  }}
        stdin:
          source /etc/set-environment;
          nixos-rebuild switch;
          exit;
          exit;
      ignore_errors: true

- name: Setup Nix
  become: true
  vars:
    ansible_python_interpreter: "/run/current-system/sw/bin/python3"
  block:
    - name: Move over config files
      copy:
        src: ./files/config/
        dest: /etc/nixos


# - name: Setup Nix
#   become: true
#   vars:
#     ansible_python_interpreter: "/run/current-system/sw/bin/python3"
#   block:

#   - name: Copy Nix config
#     template:
#       src: "{{ nix_shared_config_dir }}"
#       dest: "/etc/nixos/configuration.nix"
#     register: nixConfigChanged

#   # Add config files
#   - name: Add config
#     template:
#       src: ./files/{{ item }}.nix.j2
#       dest: /etc/nixos/{{ item }}.nix
#     vars:
#       base_dir: "{{ project_directory }}/{{ item }}"
#       config_dir: "{{ base_dir }}/config"
#       data_dir: "{{ base_dir }}/data"
#     with_items:
#       - "{{ nix_configs }}"
#     when: nix_configs is defined
#     register: nixIncludeFilesChanged

#   - name: Add static files
#     copy:
#       src: "{{ item.src }}"
#       dest: "{{ item.dest }}"
#     with_items:
#       - src: "{{ figlet_font_dir }}"
#         dest: "/etc/nixos/figlet-font.flf"
#     register: nixStaticFilesChanged

#   - name: Rerun config
#     command:
#       cmd: "nixos-rebuild switch"
#     when: nixConfigChanged.changed or nixIncludeFilesChanged.changed or nixStaticFilesChanged.changed